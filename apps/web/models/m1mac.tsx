/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: rtql8d (https://sketchfab.com/rtql8d)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/macbook-pro-16-2021-8ac16bda501c4bcc8ba93ac3eb63a8e1
title: MacBook Pro 16" 2021
*/

import { useRef } from 'react';
import { Interpolation } from 'react-spring';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';

import { a as three } from '@react-spring/three';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh;
    Object_3: THREE.Mesh;
    Object_4: THREE.Mesh;
    Object_5: THREE.Mesh;
    Object_6: THREE.Mesh;
    Object_7: THREE.Mesh;
    Object_8: THREE.Mesh;
  };
  materials: {
    ['Aluminum_-_Anodized_Rough_Grey']: THREE.MeshStandardMaterial;
    ['Aluminum_-_Satin']: THREE.MeshStandardMaterial;
    ['Aluminum_-_Satin_casing.jpg']: THREE.MeshStandardMaterial;
    Glass_Clear: THREE.MeshPhysicalMaterial;
    ['Rubber_-_Soft']: THREE.MeshStandardMaterial;
    ['Steel_-_Satin']: THREE.MeshStandardMaterial;
    ['Steel_-_Satin_NONE']: THREE.MeshStandardMaterial;
  };
};

type ModelProps = {
  open: boolean;
  hinge: Interpolation<number, number>;
} & JSX.IntrinsicElements['group'];

function Model(props: ModelProps) {
  const { open, hinge, ...rest } = props;
  const group = useRef<THREE.Group>(null);
  const group2 = useRef<THREE.Group>(null);
  const { nodes, materials } = useGLTF('/m1mac.glb') as GLTFResult;
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    if (
      group &&
      group.current &&
      group.current.rotation &&
      group.current.position &&
      !Array.isArray(group.current.rotation) &&
      typeof group.current.position !== 'number' &&
      !Array.isArray(group.current.position)
    ) {
      group.current.rotation.x = THREE.MathUtils.lerp(
        group.current.rotation.x,
        open ? Math.cos(t / 2) / 8 + 0.25 : 0,
        0.1,
      );
      group.current.rotation.y = THREE.MathUtils.lerp(
        group.current.rotation.y,
        open ? Math.sin(t / 4) / 4 : 0,
        0.1,
      );
      group.current.rotation.z = THREE.MathUtils.lerp(
        group.current.rotation.z,
        open ? Math.sin(t / 4) / 4 : 0,
        0.1,
      );
      group.current.position.y = THREE.MathUtils.lerp(
        group.current.position.y,
        open ? (-2 + Math.sin(t)) / 3 : 0,
        0.1,
      );
    }
    if (group2 && group2.current) {
      group2.current.position.z = THREE.MathUtils.lerp(
        group2.current.position.z,
        open ? -0.2 : -0.66,
        0.1,
      );
      group2.current.position.y = THREE.MathUtils.lerp(
        group2.current.position.y,
        open ? -0.2 : 0.85,
        0.1,
      );
    }
  });
  return (
    <group ref={group} {...rest} dispose={null}>
      <group name="M1_Scene">
        <group name="M1_model" rotation={[-Math.PI / 2, 0, 0]} userData={{ name: 'M1_model' }}>
          <group name="MacBook_Pro_2021" userData={{ name: 'MacBook_Pro_2021' }}>
            <three.group rotation-x={hinge} position={[0, 0.3, -0.6]}>
              <group ref={group2} position={[0, 0.85, -0.66]} rotation={[Math.PI / 2, 0, 0]}>
                <mesh
                  name="Object_3"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_3.geometry}
                  material={materials['Aluminum_-_Satin']}
                  userData={{ name: 'Object_3' }}
                />
                <mesh
                  name="Object_5"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_5.geometry}
                  material={materials.Glass_Clear}
                  userData={{ name: 'Object_5' }}
                />
                <mesh
                  name="Object_7"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_7.geometry}
                  material={materials['Steel_-_Satin']}
                  userData={{ name: 'Object_7' }}
                />
                <mesh
                  name="Object_8"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_8.geometry}
                  material={materials['Steel_-_Satin_NONE']}
                  userData={{ name: 'Object_8' }}
                />
              </group>
            </three.group>
            <mesh
              name="Object_2"
              castShadow
              receiveShadow
              geometry={nodes.Object_2.geometry}
              material={materials['Aluminum_-_Anodized_Rough_Grey']}
              userData={{ name: 'Object_2' }}
            />
            <mesh
              name="Object_6"
              castShadow
              receiveShadow
              geometry={nodes.Object_6.geometry}
              material={materials['Rubber_-_Soft']}
              userData={{ name: 'Object_6' }}
            />
            <mesh
              name="Object_4"
              castShadow
              receiveShadow
              geometry={nodes.Object_4.geometry}
              material={materials['Aluminum_-_Satin_casing.jpg']}
              userData={{ name: 'Object_4' }}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/m1mac.glb');
export default Model;
