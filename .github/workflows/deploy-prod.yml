name: deploy-prod

on:
  push:
    branches: [main]

# needed for terraform
env:
  ENVIRONMENT: staging

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      DEPLOY_INFRA: ${{ steps.determine_infra.outputs.DEPLOY_INFRA }}
      DEPLOY_API: ${{ steps.determine_api.outputs.DEPLOY_API }}
      DEPLOY_WEB: ${{ steps.determine_web.outputs.DEPLOY_WEB }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - id: determine_infra
        name: determine if infra needs to be deployed
        run: |
          if ! git diff HEAD^ HEAD --quiet ./devops/infrastructure; then
              echo "::set-output name=DEPLOY_INFRA::true"
          fi

      - id: determine_api
        name: determine if api needs to be deployed
        run: |
          if ! git diff HEAD^ HEAD --quiet ./apps/api; then
              echo "::set-output name=DEPLOY_API::true"
          fi
          if ! git diff HEAD^ HEAD --quiet ./packages/helpers; then
              echo "::set-output name=DEPLOY_API::true"
          fi
          if ! git diff HEAD^ HEAD --quiet ./devops/docker/api.dockerfile; then
              echo "::set-output name=DEPLOY_API::true"
          fi

      - id: determine_web
        name: determine if web needs to be deployed
        run: |
          if ! git diff HEAD^ HEAD --quiet ./apps/web; then
              echo "::set-output name=DEPLOY_WEB::true"
          fi
          if ! git diff HEAD^ HEAD --quiet ./packages/ui; then
              echo "::set-output name=DEPLOY_WEB::true"
          fi
          if ! git diff HEAD^ HEAD --quiet ./devops/docker/web.dockerfile; then
              echo "::set-output name=DEPLOY_WEB::true"
          fi

  deploy-infra:
    runs-on: ubuntu-latest
    needs: detect_changes
    if: ${{ needs.detect_changes.outputs.DEPLOY_INFRA == 'true' }}

    environment:
      name: production

    steps:
      - uses: actions/checkout@v3

      - name: azure cli login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: use terraform

        uses: hashicorp/setup-terraform@v2

      - name: terraform plan
        run: yarn plan

      - name: terraform apply
        run: yarn apply

  deploy-api:
    runs-on: ubuntu-latest
    needs: detect_changes
    if: ${{ needs.detect_changes.outputs.DEPLOY_API == 'true' }}

    environment:
      name: production

    steps:
      - uses: actions/checkout@v3

      - name: use node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: azure cli login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: set up qemu
        uses: docker/setup-qemu-action@v2

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: build api container and push to acr
        run: devops/docker/deploy-web.sh

  deploy-web:
    runs-on: ubuntu-latest
    needs: detect_changes
    if: ${{ needs.detect_changes.outputs.DEPLOY_WEB == 'true' }}

    environment:
      name: production

    steps:
      - uses: actions/checkout@v3

      - name: azure cli login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: set up qemu
        uses: docker/setup-qemu-action@v2

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: build web container and push to acr
        run: devops/docker/deploy-web.sh
